{"version":3,"sources":["Graph/CandleStickGraph.js","Utils/get_company_data.js","Graph/Graph.js","HamburgerMenu/HamburgerMenu.js","Header/Header.js","NewsFeed/nextitem.js","NewsFeed/newsitem.js","NewsFeed/newsfeed.js","About/About.js","Content/Content.js","Chat/Chat.js","Utils/get_watson_response.js","Company/Company.js","Home/Home.js","App/App.js","serviceWorker.js","index.js"],"names":["CandleStickGraph","this","props","data","length","console","log","type","width","ratio","xAccessor","d","date","xExtents","last","height","margin","left","right","top","bottom","seriesName","xScale","scaleTime","id","yExtents","high","low","axisAt","orient","ticks","className","React","Component","defaultProps","fitWidth","get_company_data","company","axios","post","newDate","Date","sum","getDate","getMonth","getFullYear","accumulator","curData","parseDate","timeParse","Graph","state","graphType","startDate","endDate","stockData","avgSentiment","regSlope","regOffset","then","result","setState","company_name","sentiment","dates","pos_neg","map","sentimentScore","score","stock_data","minute","open","parseFloat","open_value","close","close_value","high_pt","low_pt","reduce","useStyles","makeStyles","list","fullList","HamburgerMenu","classes","useState","toggleDrawer","anchor","event","key","Fragment","style","fontSize","padding","aria-controls","aria-haspopup","onClick","Drawer","onClose","clsx","role","onKeyDown","List","text","index","to","ListItem","button","ListItemIcon","ListItemText","primary","Divider","Header","theme","root","maxWidth","backgroundColor","palette","background","paper","inline","display","NextItem","alignItems","title","secondary","textDecoration","href","link","AlignItemsList","articles","article","article_name","url","variant","component","NewsFeed","article_list","metadata","About","Content","value","Chat","messageList","message","get_watson_response","output","generic","forEach","element","_sendMessage","author","agentProfile","teamName","imageUrl","onMessageWasSent","_onMessageWasSent","bind","showEmoji","Company","stock","Home","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b0eb2a8.chunk.js","sourcesContent":["\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { scaleTime } from \"d3-scale\";\r\nimport { utcHour } from \"d3-time\";\r\n\r\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\r\nimport { CandlestickSeries } from \"react-stockcharts/lib/series\";\r\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\r\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\r\nimport { last, timeIntervalBarWidth } from \"react-stockcharts/lib/utils\";\r\n\r\nclass CandleStickGraph extends React.Component {\r\n\trender() {\r\n    if(this.props.data.length > 0){\r\n      console.log(this.props);\r\n\r\n      const marginLeftRight = 50;\r\n      const marginTop = 10;\r\n      const marginBottom = 30;\r\n\r\n      const { type, width, data, ratio } = this.props;\r\n      const xAccessor = (d) => d.date;\r\n      const xExtents = [\r\n        // \"first\" point, ie the rightmost\r\n        xAccessor(last(data)),\r\n        xAccessor(data[0])\r\n        // \"last\" point, ie the leftmost point\r\n      ];\r\n      return (\r\n        <ChartCanvas height={400}\r\n            ratio={ratio}\r\n            width={width}\r\n            margin={{ left: marginLeftRight, right: marginLeftRight, top: marginTop, bottom: marginBottom }}\r\n            type={type}\r\n            seriesName=\"GOOG\"\r\n            data={data}\r\n            xAccessor={xAccessor}\r\n            xScale={scaleTime()}\r\n            xExtents={xExtents}>\r\n\r\n          <Chart id={1} yExtents={d => [d.high + (d.high - d.low), d.low - (d.high - d.low)]}>\r\n            <XAxis axisAt=\"bottom\" orient=\"bottom\" ticks={6}/>\r\n            <YAxis axisAt=\"left\" orient=\"left\" ticks={5} />\r\n            {/*\r\n              CandleStickSeries parameter, \"width\" controls the width of each candlestick in the graph,\r\n              default scaling is appropriate for larger datasets.  For a single day with data points every 30 minutes,\r\n              override default\r\n            */}\r\n            <CandlestickSeries /*width={timeIntervalBarWidth(utcHour)}*/ width={(width - 2 * marginLeftRight) / data.length}/>\r\n          </Chart>\r\n        </ChartCanvas>\r\n      );\r\n    } else {\r\n      return(\r\n        <p className=\"graph-loading\">Rendering...</p>\r\n      );\r\n    }\r\n\t}\r\n}\r\n\r\nCandleStickGraph.propTypes = {\r\n\tdata: PropTypes.array.isRequired,\r\n\twidth: PropTypes.number.isRequired,\r\n\tratio: PropTypes.number.isRequired,\r\n\ttype: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\r\n};\r\n\r\nCandleStickGraph.defaultProps = {\r\n\ttype: \"svg\",\r\n};\r\nCandleStickGraph = fitWidth(CandleStickGraph);\r\n\r\nexport default CandleStickGraph;\r\n","import axios from \"axios\"\r\n\r\nexport default function get_company_data(company) {\r\n  return axios.post(\"/api/get_company_data\", {company});\r\n}","// src/components/Content.js\r\nimport React from 'react';\r\nimport CandleStickGraph from './CandleStickGraph';\r\nimport { timeParse } from \"d3-time-format\";\r\nimport './Graph.css';\r\n\r\nimport get_company_data from '../Utils/get_company_data';\r\n\r\n// On loading, get current date\r\nlet newDate = new Date();\r\nlet date = newDate.getDate();\r\nlet month = newDate.getMonth() + 1;\r\nlet year = newDate.getFullYear();\r\n\r\nconst sum = (accumulator, curData) => {\r\n  return accumulator + curData;\r\n};\r\n\r\nconst parseDate = timeParse(\"%I:%M %p\");\r\n\r\nclass Graph extends React.Component {\r\n  constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        graphType: \"\",\r\n        startDate: \"\",\r\n        endDate: \"\",\r\n        company: \"\",\r\n\r\n        /*\r\n        time: [],\r\n        stockOpen: [],\r\n        stockHigh: [],\r\n        stockLow: [],\r\n        stockClose: [],\r\n        stockAvg: [],\r\n        sentiment: [],\r\n        */\r\n\r\n        stockData: [],\r\n\r\n        avgSentiment: 0,\r\n        regSlope: 0,\r\n        regOffset: 0,\r\n        data: {}\r\n      };\r\n  }\r\n\r\n  // Use lifecycle hook componentDidMount to update state, results are reflected on webpage\r\n  componentDidMount() {\r\n    // fetch data and, once retrieved, resolve the promise and update the state.\r\n    get_company_data(\"Google\").then(result => {\r\n      this.setState({\r\n        // get raw data in JSON format, according to standardized format set by group\r\n        data: result.data,\r\n        // extract company name\r\n        company: result.data.company_name,\r\n        // extract sentiment values\r\n        sentiment: result.data.dates[0].pos_neg.map((sentimentScore) => sentimentScore.score),\r\n\r\n        // Get time values for each data point\r\n        //time: result.data.dates[0].stock_data.map((data) => data.minute),\r\n\r\n        // Assign values for all stock variables\r\n        //stockOpen: result.data.dates[0].stock_data.map((data) => parseFloat(data.open_value)),\r\n        //stockHigh: result.data.dates[0].stock_data.map((data) => parseFloat(data.high_pt)),\r\n        //stockLow: result.data.dates[0].stock_data.map((data) => parseFloat(data.low_pt)),\r\n        //stockClose: result.data.dates[0].stock_data.map((data) => parseFloat(data.close_value)),\r\n        //stockAvg: result.data.dates[0].stock_data.map((data) => parseFloat(data.average_value)),\r\n        stockData: result.data.dates[0].stock_data.map((data) => {\r\n          return(\r\n            {\r\n              date: parseDate(data.minute),\r\n              open: parseFloat(data.open_value),\r\n              close: parseFloat(data.close_value),\r\n              high: parseFloat(data.high_pt),\r\n              low: parseFloat(data.low_pt),\r\n            }\r\n          );\r\n        }),\r\n\r\n        // Calculate the average sentiment value(s)\r\n        avgSentiment: result.data.dates[0].pos_neg.map((sentimentScore) => parseFloat(sentimentScore.score)).reduce(sum, 0) / result.data.dates[0].pos_neg.length\r\n      })\r\n      // DEBUG: Log the received data\r\n      // console.log(result);\r\n      // console.log(result.data.dates[0].pos_neg.map((sentimentScore) => sentimentScore.score).reduce(sum, 0));\r\n      // console.log(result.data.dates[0].pos_neg.length);\r\n    })\r\n  }\r\n\r\n  // incoming props to determine the graph to fetch\r\n  render() {\r\n    //const graphData = {date: this.state.time, open: this.state.stockOpen, high: this.state.stockHigh, low: this.state.stockLow, close: this.state.stockClose};\r\n    return (\r\n      // TODO: finish implementing feature list\r\n      /*\r\n        Feature list:\r\n        - Form field for which company to look at, triggers API call and fetches and sets new data\r\n        - Form field for graph coverage in days, 1 day, 7 day, 30 day, custom range\r\n        -- If custom range, user must pick start and end date\r\n      */\r\n      <div className=\"graph-content\">\r\n        <CandleStickGraph\r\n          data={this.state.stockData}\r\n          width={800}\r\n          ratio={1}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Graph;\r\n","import React from 'react';\r\nimport './HamburgerMenu.css';\r\n\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n});\r\n\r\nexport default function HamburgerMenu(){\r\n    const classes = useStyles();\r\n    const [state, setState] = React.useState({\r\n      'left': false,\r\n    });\r\n\r\n    const toggleDrawer = (anchor, open) => (event) => {\r\n      if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n        return;\r\n      }\r\n      setState({ ...state, [anchor]: open });\r\n    }\r\n\r\n    const list = (classes, anchor) => (\r\n      <div\r\n        className={clsx(classes.list, {\r\n          [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n        })}\r\n        role=\"presentation\"\r\n        onClick={toggleDrawer(anchor, false)}\r\n        onKeyDown={toggleDrawer(anchor, false)}>\r\n        <List>\r\n          {['Home', 'About', 'Graphs'].map((text, index) => (\r\n            <Link className='link' to={text=== 'Home' ? '/' : (text === 'About' ? '/about' : '/graph')}>\r\n              <ListItem button key={text}>\r\n                <ListItemIcon>{text === 'Home' ? <HomeIcon/> : (text === 'About' ? <PeopleIcon/> : <TrendingUpIcon/>)}</ListItemIcon>\r\n                <ListItemText primary={text} />\r\n              </ListItem>\r\n            </Link>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {['Exit'].map((text) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{text === 'Exit' ? <ExitToAppIcon/> : <ClearIcon/>}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </div>\r\n    );\r\n\r\n    return(\r\n      <div className=\"hamburger-menu\">\r\n        {['left'].map((anchor) => (\r\n          <React.Fragment key={anchor}>\r\n            <MenuIcon style={{ fontSize: 40, padding:20 }} aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={toggleDrawer(anchor, true)}/>\r\n            <Drawer anchor={anchor} open={state[anchor]} onClose={toggleDrawer(anchor, false)}>\r\n              {list(classes, anchor)}\r\n            </Drawer>\r\n          </React.Fragment>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n","// src/components/Content.js\r\nimport React from 'react';\r\n// import Icon from '../Icon/Icon'\r\nimport SettingsOutlinedIcon from '@material-ui/icons/SettingsOutlined';\r\nimport AnnouncementOutlinedIcon from '@material-ui/icons/AnnouncementOutlined';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport HamburgerMenu from '../HamburgerMenu/HamburgerMenu';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Header.css';\r\n\r\nconst Header = (props) => {\r\n  // incoming props to determine the graph to fetch\r\n  return (\r\n      <div className=\"site-header\">\r\n        <HamburgerMenu/>\r\n\r\n        <Link className=\"title\" to=\"/graph\">\r\n          <h2 id=\"site-title\">VestEd</h2>\r\n        </Link>\r\n\r\n        <div className=\"spacer\"/>\r\n\r\n        {/*Notifications*/}\r\n        <Link to=\"/\">\r\n          <div className=\"icon\" >\r\n            <AnnouncementOutlinedIcon style={{ fontSize: 40, padding:20  }}/>\r\n          </div>\r\n        </Link>\r\n\r\n        {/*Settings Menu*/}\r\n        <div className=\"icon\" >\r\n          <SettingsOutlinedIcon style={{ fontSize: 40, padding:20 }}/>\r\n        </div>\r\n \r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Header;","\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport './newsitem'\r\nimport './newsitem.css'\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n}));\r\n\r\nfunction NextItem(props){\r\n  const classes = useStyles();\r\n    return(\r\n        \r\n        <ListItem alignItems=\"flex-start\">\r\n        {/* <ListItemAvatar> */}\r\n          {/* <Avatar alt={props.source} src=\"nyt.png\"/>       TODO:: change avatar to actual logos */}\r\n    {/* <Avatar >{props.avatar}</Avatar>\r\n        </ListItemAvatar> */}\r\n        <ListItemText\r\n          primary={props.title}\r\n          secondary={\r\n            <React.Fragment>\r\n              {/* <Typography\r\n                component=\"span\"\r\n                variant=\"body2\"\r\n                className={classes.inline}\r\n                color=\"textPrimary\"\r\n              >\r\n                {props.source}   just adds a header to the lower text in the news item */}\r\n              {/* </Typography> */}\r\n              \r\n              <li> \r\n                {/* { \"— \" }{props.text} */}\r\n                <a style={{ textDecoration: 'none'}} href={props.link}> ... </a>\r\n              </li>\r\n       \r\n            </React.Fragment>\r\n          }\r\n        />\r\n      </ListItem>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default NextItem","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport NextItem from './nextitem'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n}));\r\n\r\nexport default function AlignItemsList(props) {\r\n  const classes = useStyles();\r\n  if (props.articles) {\r\n    return (\r\n      <div>\r\n        <List className={classes.root}>\r\n          {props.articles.map(function(article,index){\r\n              return ( \r\n                <li>\r\n                  {/* <NextItem  avatar = {article.avtr} source = {article.src} title ={article.ttl} text = {article.txt} link = {article.lnk} /> */}\r\n                  <NextItem  title ={article.article_name} link = {article.url} />\r\n                  <Divider variant=\"inset\" component=\"li\" />\r\n                </li>\r\n              );\r\n            })}\r\n        </List>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <List className={classes.root}>\r\n          <li>ERROR LOADING NEWS PROPS</li>\r\n        </List>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport './newsfeed.css';\r\nimport NewsItem from './newsitem';\r\nimport get_company_data from '../Utils/get_company_data';\r\n\r\n\r\n\r\n// function NewsFeed(props) {\r\n//   return (\r\n//       <div className=\"NewsFeed\">\r\n//         <NewsItem articles = {props.article_list}/>\r\n//       </div>\r\n//   );\r\n// }\r\n\r\n\r\nclass NewsFeed extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n          data: {},\r\n          article_list: []\r\n        }\r\n\r\n    }\r\n\r\n     // Use lifecycle hook componentDidMount to update state, results are reflected on webpage\r\n     componentDidMount() {\r\n      // fetch data and, once retrieved, resolve the promise and update the state.\r\n      get_company_data(\"Google\").then(result => {\r\n        this.setState({\r\n          // data in JSON format according to standards set by group\r\n          data: result.data,\r\n          article_list: result.data.dates[0].metadata\r\n        })\r\n        // DEBUG: Log the received data\r\n        // console.log(result);\r\n        // console.log(result.data.dates[0].metadata);\r\n      })\r\n    }\r\n\r\n    render() {\r\n      // incoming props to determine the graph to fetch\r\n      if(this.state.article_list.length > 0){\r\n        return (\r\n        <div className=\"NewsFeed\">\r\n        {\r\n          <NewsItem articles = {this.state.article_list}/>\r\n        }\r\n        </div>\r\n        );\r\n      } else {\r\n        return(\r\n          <div className=\"NewsFeed\">\r\n            <p>Rendering...</p>\r\n          </div>\r\n        );\r\n      }\r\n  }\r\n    \r\n}\r\n\r\nexport default NewsFeed;\r\n","// import components\r\nimport React from 'react';\r\nimport Header from '../Header/Header';\r\nimport NewsFeed from '../NewsFeed/newsfeed';\r\n\r\n// import styles\r\nimport './About.css';\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"About\">\r\n    <h1>About the Team</h1>\r\n      <p className=\"content\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;","// src/components/Content.js\r\nimport React from 'react';\r\nimport Graph from '../Graph/Graph';\r\nimport About from '../About/About';\r\n\r\n// import styles\r\nimport './Content.css';\r\n\r\nconst Content = (props) => {\r\n  const graphType = 'sentiment';\r\n  if(props.value==='graph'){\r\n    return (\r\n      <div className=\"content\">\r\n        <h1>Financials Graph</h1>\r\n        <div className=\"data-insights\">\r\n          <Graph value={graphType}/>\r\n        </div>\r\n        <div className=\"text-wrapper\">          \r\n            <p>Based on the graphed data above, we recommend purchasing on dates where public sentiment changes from negative to positive.</p>\r\n          </div>\r\n        \r\n      </div>\r\n    );\r\n  } else if (props.value==='about'){\r\n    return (\r\n      <div className=\"content\">\r\n        <About value=\"about\"/>\r\n      </div>\r\n    );\r\n  } else {\r\n    // TODO: Replace error message with default content for rendering\r\n    return (\r\n      <div>\r\n        <h1>ERROR LOADING CONTENT FROM PROPS</h1>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Content;","import React, {Component} from 'react'\r\nimport {Launcher} from 'react-chat-window'\r\nimport get_watson_response from '../Utils/get_watson_response';\r\n\r\nclass Chat extends Component {\r\n \r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      messageList: []\r\n    };\r\n  }\r\n \r\n  _onMessageWasSent(message) {\r\n    this.setState({\r\n      messageList: [...this.state.messageList, message]\r\n    })\r\n    // Route, post message\r\n    get_watson_response(message.data.text).then(result => {\r\n      console.log(\"Watson response:\");\r\n      // TODO: comment/remove debug utilities\r\n      // DEBUG: Log the received data\r\n      // console.log(result.data.output);\r\n      console.log(result.data.output.generic);\r\n      if(result.data.output.generic){\r\n        result.data.output.generic.forEach(element => {\r\n          this._sendMessage(element.text);\r\n        });\r\n      }\r\n    })\r\n  }\r\n\r\n  _sendMessage(text) {\r\n    if (text.length > 0) {\r\n      this.setState({\r\n        messageList: [...this.state.messageList, {\r\n          author: 'them',\r\n          type: 'text',\r\n          data: { text }\r\n        }]\r\n      })\r\n    }\r\n    console.log(\"SEND MESSAGE\");\r\n  }\r\n \r\n  render() {\r\n    return (\r\n    <div className=\"chat-window\">\r\n      <Launcher\r\n        agentProfile={{\r\n          teamName: 'VestEd Assistant',\r\n          imageUrl: 'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png'\r\n        }}\r\n        onMessageWasSent={this._onMessageWasSent.bind(this)}\r\n        messageList={this.state.messageList}\r\n        showEmoji\r\n      />\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chat;","import axios from \"axios\"\r\n\r\nexport default function get_watson_response(message) {\r\n  return axios.post(\"/api/get_watson_response\", {message});\r\n}","import React from 'react';\r\nimport './Company.css';\r\nimport get_company_data from '../Utils/get_company_data';\r\n\r\nconst sum = (accumulator, curData) => {\r\n  return accumulator + parseFloat(curData);\r\n};\r\n\r\nclass Company extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            company: \"\",\r\n            stock: [],\r\n            sentiment: [],\r\n            avgSentiment: 0,\r\n            data: {}\r\n        };\r\n    }\r\n\r\n    // Use lifecycle hook componentDidMount to update state, results are reflected on webpage\r\n    componentDidMount() {\r\n      // fetch data and, once retrieved, resolve the promise and update the state.\r\n      get_company_data(\"Google\").then(result => {\r\n        this.setState({\r\n          // data in JSON format according to standards set by group\r\n          data: result.data,\r\n          sentiment: result.data.dates[0].pos_neg.map((sentimentScore) => sentimentScore.score),\r\n          company: result.data.company_name,\r\n          avgSentiment: result.data.dates[0].pos_neg.map((sentimentScore) => sentimentScore.score).reduce(sum, 0) / result.data.dates[0].pos_neg.length\r\n        })\r\n        // DEBUG: Log the received data\r\n        // console.log(result);\r\n        // console.log(result.data.dates[0].pos_neg.map((sentimentScore) => sentimentScore.score).reduce(sum, 0));\r\n        // console.log(result.data.dates[0].pos_neg.length);\r\n      })\r\n    }\r\n\r\n    render() {\r\n        // incoming props to determine the graph to fetch\r\n        return (\r\n            <div className=\"content\">\r\n                <p>{this.state.company}:</p>\r\n                <p>Average sentiment for today: {this.state.avgSentiment}</p>\r\n                <p>Raw sentiment values:</p>\r\n                {\r\n                    this.state.sentiment.map((data) =>  <p> {data > 0 ? '+' : ''}{data} </p>)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Company;","import React, {Component} from 'react'\r\nimport {Launcher} from 'react-chat-window'\r\nimport get_watson_response from '../Utils/get_watson_response';\r\n\r\n/**\r\n * Component: Home\r\n * Description: Component Home will display the landing page for the vestEd website.\r\n * Contents:\r\n * - Text descriptions of the site's functionality\r\n * - Abbreviated \"About\" section\r\n * - Appropriate in-content links to individual pages\r\n */\r\n\r\nclass Home extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      messageList: []\r\n    };\r\n  }\r\n  render(){\r\n    return(\r\n      <div className=\"content\">\r\n        <p>Welcome to the VestEd home page.  TODO: fill in with descriptive panels about our features and inline links.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","// import components\r\nimport React from 'react';\r\nimport { createBrowserHistory } from \"history\";\r\nimport Content from '../Content/Content';\r\nimport Chat from '../Chat/Chat';\r\nimport Header from '../Header/Header';\r\nimport NewsFeed from '../NewsFeed/newsfeed';\r\nimport Company from '../Company/Company';\r\nimport Home from '../Home/Home'\r\n\r\n// react-dom import\r\nimport { BrowserRouter as Router, Switch, Link, Route } from \"react-router-dom\";\r\n\r\n// import styles\r\nimport './App.css';\r\nimport '../Chat/Chat.css';\r\nimport '../HamburgerMenu/HamburgerMenu.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n    <div className=\"App\">\r\n      <Header value=\"site-header\"/>\r\n      <div className=\"main\">\r\n\r\n        <div className=\"chat-wrapper\">\r\n          <Chat value=\"chatbot\"/>\r\n        </div>\r\n\r\n        {<Switch>\r\n          <Route path=\"/about\">\r\n            <Content value=\"about\"/>\r\n          </Route>\r\n          <Route path=\"/graph\">\r\n            <Content value=\"graph\"/>\r\n          </Route>\r\n          <Route path=\"/comp\">\r\n            <Company value=\"\"/>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home value=\"\"/>\r\n          </Route>\r\n        </Switch>}\r\n\r\n        <div className=\"news-wrapper\">\r\n          {/* <NewsFeed value = \"newsfeed\" data = {articles}/> */}\r\n          <NewsFeed value = \"newsfeed\"/>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}